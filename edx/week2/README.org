* 2: How to Design Data

** Practice Problems
*** rocket
**** Problem A

 You are designing a program to track a rocket's journey as it descends 100
 kilometers to Earth. You are only interested in the descent from 100 kilometers
 to touchdown. Once the rocket has landed it is done.

 Design a data definition to represent the rocket's remaining descent. Call it
 RocketDescent.

**** Solution
     #+BEGIN_SRC racket
;; RocketDescent is one of:
;;  - Integer[0, 100]
;;  - false
;; interp. Rocket kilometers to touchdown
(define RD1 100)   ; 100km to land
(define RD2 50)    ; 50km to land
(define RD3 0.5)   ; 0.5 km to land
(define RD4 false) ; landed.

#;
(define (fn-for-rocket-descent rd)
  (... rd))

;; Template rules used:
;; - one of: 2 cases
;; - atomic distinc: false
;; - atomic non-distinc: Integer (0,100]
     #+END_SRC

**** Problem B
     Design a function that will output the rocket's remaining descent distance
in a short string that can be broadcast on Twitter. When the descent is over,
the message should be "The rocket has landed!". Call your function
rocket-descent-to-msg.

**** Solution
     #+BEGIN_SRC racket
;; Number -> String
;; produces a short string with the rocket's remaining descent distance
(check-expect (rocket-descent-to-msg 0)   "The rocket has landed!")
(check-expect (rocket-descent-to-msg 100) "Rocket's remaining descent distance is 100")
(check-expect (rocket-descent-to-msg 50) "Rocket's remaining descent distance is 50")
                                  
;(define (rocket-descent-to-msg d) "The rocket has landed!") ; this is the stub

(define (rocket-descent-to-msg d)
  (cond [(= d 0) "The rocket has landed!"]
        [else
         (string-append
          "Rocket's remaining descent distance is "
          (number->string d))]))
     #+END_SRC
