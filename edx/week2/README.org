* 2: How to Design Data

** Practice Problems
*** rocket
**** Problem A

 You are designing a program to track a rocket's journey as it descends 100
 kilometers to Earth. You are only interested in the descent from 100 kilometers
 to touchdown. Once the rocket has landed it is done.

 Design a data definition to represent the rocket's remaining descent. Call it
 RocketDescent.

**** Solution
     #+BEGIN_SRC racket
;; RocketDescent is one of:
;;  - Integer[0, 100]
;;  - false
;; interp. Rocket kilometers to touchdown
(define RD1 100)   ; 100km to land
(define RD2 50)    ; 50km to land
(define RD3 0.5)   ; 0.5 km to land
(define RD4 false) ; landed.

#;
(define (fn-for-rocket-descent rd)
  (... rd))

;; Template rules used:
;; - one of: 2 cases
;; - atomic distinc: false
;; - atomic non-distinc: Integer (0,100]
     #+END_SRC

**** Problem B
     Design a function that will output the rocket's remaining descent distance
in a short string that can be broadcast on Twitter. When the descent is over,
the message should be "The rocket has landed!". Call your function
rocket-descent-to-msg.

**** Solution
     #+BEGIN_SRC racket
;; Number -> String
;; produces a short string with the rocket's remaining descent distance
(check-expect (rocket-descent-to-msg 0)   "The rocket has landed!")
(check-expect (rocket-descent-to-msg 100) "Rocket's remaining descent distance is 100")
(check-expect (rocket-descent-to-msg 50) "Rocket's remaining descent distance is 50")
                                  
;(define (rocket-descent-to-msg d) "The rocket has landed!") ; this is the stub

(define (rocket-descent-to-msg d)
  (cond [(= d 0) "The rocket has landed!"]
        [else
         (string-append
          "Rocket's remaining descent distance is "
          (number->string d))]))
     #+END_SRC

* Design Quiz

** Solution

#+BEGIN_SRC racket
;; HtDD Design Quiz

;; Age is Natural
;; interp. the age of a person in years
(define A0 18)
(define A1 25)

#;
(define (fn-for-age a)
  (... a))

;; Template rules used:
;; - atomic non-distinct: Natural


; Problem 1:
; 
; Consider the above data definition for the age of a person.
; 
; Design a function called teenager? that determines whether a person
; of a particular age is a teenager (i.e., between the ages of 13 and 19).


;; Age -> Boolean
(check-expect (teenager? 11) false)
(check-expect (teenager? 13) true)
(check-expect (teenager? 19) true)
(check-expect (teenager? 25) false)

;(define (teenager? a) false) ; stub

(define (teenager? a)
  (and (>= a 13 )
       (<= a 19)))


; Problem 2:
; 
; Design a data definition called MonthAge to represent a person's age
; in months.


;; MonthAge is Natural
;; interp. The age of a person in months
(define MA1 396)
(define MA2 255)

(define (fn-for-month-age a)
  (... a))

;; Template rules used
;; - atomic non-distinc: Natural

; Problem 3:
; 
; Design a function called months-old that takes a person's age in years 
; and yields that person's age in months.
; 


;; Age -> MonthAge
(check-expect (months-old 33) 396)
(check-expect (months-old 20) 240)

(define (months-old age) (* age 12))


; Problem 4:(check-expect (increase-health false) false)
; 
; Consider a video game where you need to represent the health of your
; character. The only thing that matters about their health is:
; 
;   - if they are dead (which is shockingly poor health)
;   - if they are alive then they can have 0 or more extra lives
; 
; Design a data definition called Health to represent the health of your
; character.
; 
; Design a function called increase-health that allows you to increase the
; lives of a character.  The function should only increase the lives
; of the character if the character is not dead, otherwise the character
; remains dead.


;; Health is one of:
;; - false
;; - Number[0..]
;; interp. Health of the character, false means dead, 0 or more means alive.

(define H1 1)
(define H2 2)
(define H3 false)

#;
(define (fn-for-health b)
  (cond [(false? b) (...)]
        [(number? b) (... b)]))

;; Template rules used:
;;  - one of: 2 cases
;;  - atomic distinct: false
;;  - atomic non-distinct: Number

;; -- Functions

;; Health -> Health
(check-expect (increase-health false) false)
(check-expect (increase-health 0) 1)

(define (increase-health h)
  (cond [(false? h) false]
        [(number? h) (+ h 1)]))
#+END_SRC
